var searchIndex = {};
searchIndex["tokio_uds"] = {"doc":"Bindings for Unix Domain Sockets and futures","items":[[3,"UnixDatagramFramed","tokio_uds","A unified `Stream` and `Sink` interface to an underlying `UnixDatagramSocket`, using the `UnixDatagramCodec` trait to encode and decode frames.",null,null],[3,"UnixListener","","A Unix socket which can accept connections from other unix sockets.",null,null],[3,"UnixStream","","A structure representing a connected unix socket.",null,null],[3,"UnixDatagram","","An I/O object representing a Unix datagram socket.",null,null],[3,"SendDgram","","A future for writing a buffer to a Unix datagram socket.",null,null],[3,"RecvDgram","","A future for receiving datagrams from a Unix datagram socket.",null,null],[11,"poll","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"start_send","","",0,null],[11,"poll_complete","","",0,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"get_ref","","Returns a reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"unixdatagram"}}],[11,"get_mut","","Returns a mutable reference to the underlying I/O stream wrapped by `Framed`.",0,{"inputs":[{"name":"self"}],"output":{"name":"unixdatagram"}}],[11,"into_inner","","Consumes the `Framed`, returning its underlying I/O stream.",0,{"inputs":[{"name":"self"}],"output":{"name":"unixdatagram"}}],[8,"UnixDatagramCodec","","Encoding of frames via buffers.",null,null],[16,"In","","The type of decoded frames.",1,null],[16,"Out","","The type of frames to be encoded.",1,null],[10,"decode","","Attempts to decode a frame from the provided buffer of bytes.",1,null],[10,"encode","","Encodes a frame into the buffer provided.",1,null],[11,"bind","","Creates a new `UnixListener` bound to the specified path.",2,{"inputs":[{"name":"p"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_listener","","Consumes a `UnixListener` in the standard library and returns a nonblocking `UnixListener` from this crate.",2,{"inputs":[{"name":"unixlistener"},{"name":"handle"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",2,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"incoming","","Consumes this listener, returning a stream of the sockets this listener accepts.",2,{"inputs":[{"name":"self"}],"output":{"name":"iostream"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",2,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"connect","","Connects to the socket named by `path`.",3,{"inputs":[{"name":"p"},{"name":"handle"}],"output":{"name":"result"}}],[11,"from_stream","","Consumes a `UnixStream` in the standard library and returns a nonblocking `UnixStream` from this crate.",3,{"inputs":[{"name":"unixstream"},{"name":"handle"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",3,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",3,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is writey to be written to or not.",3,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the socket address of the local half of this connection.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",3,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"read","","",3,null],[11,"write","","",3,null],[11,"flush","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"poll_read","","",3,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","",3,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",3,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"bind","","Creates a new `UnixDatagram` bound to the specified path.",4,{"inputs":[{"name":"p"},{"name":"handle"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",4,{"inputs":[{"name":"handle"}],"output":{"name":"result"}}],[11,"from_datagram","","Consumes a `UnixDatagram` in the standard library and returns a nonblocking `UnixDatagram` from this crate.",4,{"inputs":[{"name":"unixdatagram"},{"name":"handle"}],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",4,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"result"}}],[11,"poll_read","","Test whether this socket is ready to be read or not.",4,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"poll_write","","Test whether this socket is writey to be written to or not.",4,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"local_addr","","Returns the local address that this socket is bound to.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the address of this socket's peer.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket.",4,null],[11,"recv","","Receives data from the socket.",4,null],[11,"recv_dgram","","Returns a future for receiving a datagram. See the documentation on RecvDgram for details.",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"recvdgram"}}],[11,"send_to","","Sends data on the socket to the specified address.",4,null],[11,"send","","Sends data on the socket to the socket's peer.",4,null],[11,"send_dgram","","Returns a future sending the data in buf to the socket at path.",4,{"inputs":[{"name":"self"},{"name":"t"},{"name":"p"}],"output":{"name":"senddgram"}}],[11,"take_error","","Returns the value of the `SO_ERROR` option.",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",4,{"inputs":[{"name":"self"},{"name":"shutdown"}],"output":{"name":"result"}}],[11,"framed","","Provides a `Stream` and `Sink` interface for reading and writing to this `UnixDatagram` object, using the provided `UnixDatagramCodec` to read and write the raw data.",4,{"inputs":[{"name":"self"},{"name":"c"}],"output":{"name":"unixdatagramframed"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_raw_fd","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rawfd"}}],[11,"poll","","",5,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",6,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}]],"paths":[[3,"UnixDatagramFramed"],[8,"UnixDatagramCodec"],[3,"UnixListener"],[3,"UnixStream"],[3,"UnixDatagram"],[3,"SendDgram"],[3,"RecvDgram"]]};
initSearch(searchIndex);
